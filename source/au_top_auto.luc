module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],   // 5 buttons on IO Shield
    input error
    //input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_cond[5];
    edge_detector buttondetector[5](#RISE(1), #FALL(0));
    .rst(rst), .error(error){
      
      // booleanTester adder_tester(.error(0));
      aluTester alu_tester;
      
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // 7-segment
    // seg_display.values = $build(16b0, 4);
    // io_seg = seg_display.seg;
    // io_sel = seg_display.sel;
    
    // io_button
    button_cond.in = io_button;
    buttondetector.in = button_cond.out;
    
    
    // io_led
    io_led[0][2:0] = alu_tester.out;
    io_led[1][1:0] = alu_tester.indicator;
    io_led[1][7:4] = alu_tester.state_indicator;
    io_led[2] = alu_tester.counter_indicator;
    
    
    io_sel = 4h0;
    alu_tester.proceed = buttondetector.out[1];
    if(alu_tester.indicator[0] == 1) {
      if(alu_tester.indicator[1] == 0) {
        io_seg = ~b11110001;
      } else {
        io_seg = ~b11101101;
      }
    }
  }
}