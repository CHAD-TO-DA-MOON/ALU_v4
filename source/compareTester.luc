module compareTester (
    input clk, 
    input rst,
    input start,         // button to begin unit tester, 1: tester wakes up, 0: tester sleeps
    output indicator[2], // indicate if passed test, 1: pass, 0: fail
    output state_indicator[4],
    output counter_indicator[8]
) {
	dff counter[6](#INIT(0), .clk(clk), .rst(rst));
	fsm state(.clk(clk), .rst(rst)) = {SLEEP, TEST, PASS, FAIL};
	compare compareUnit;
  adder adderUnit;

	always{
        indicator = b10;   // 10: pending; 11: pass all the tests; 01: fail the tester
        adderUnit.x = b0000000000000000;
        adderUnit.y = b0000000000000000;
        adderUnit.alufn = b000000;
        compareUnit.alufn = b000000;
        compareUnit.z = adderUnit.z;
        compareUnit.v = adderUnit.v;
        compareUnit.n = adderUnit.n;

        if (start == 0) {
          state.d = state.SLEEP;
          counter.d = 0;
        }
        
        case (state.q){
            state.SLEEP:
                if (start == 1) {state.d = state.TEST;}

            state.TEST:
                case (counter.q){
                    b000001:
                        // CMPEQ: 0 == 0
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16b0;
                        adderUnit.y = 16b0;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                

                    b000010: 
                        // CMPEQ: pos == pos
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16h0111;
                        adderUnit.y = 16h0111;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b000011: 
                        // CMPEQ: neg == neg
                        compareUnit.alufn = b100001; 
                        adderUnit.alufn = b100001;  
                        adderUnit.x = 16hFFFD;
                        adderUnit.y = 16hFFFD;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b000100: 
                        // CMPEQ: pos < pos without overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16h0003;
                        adderUnit.y = 16h0001;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}  
                    

                    b000101: 
                        // CMPEQ: neg < pos with overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16hF001;
                        adderUnit.y = 16h7FFF;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b000110: 
                        // CMPEQ: neg < pos without overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16hFFF9;
                        adderUnit.y = 16h0001;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 
                    

                    b000111: 
                        // CMPEQ: neg < neg without overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16hFFFD;
                        adderUnit.y = 16hFFFE;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b001000: 
                        // CMPEQ: pos > pos without overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16h0010;
                        adderUnit.y = 16h0008;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b001001: 
                        // CMPEQ: pos > neg without overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16h0003;
                        adderUnit.y = 16hFFFF;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b001010: 
                        // CMPEQ: pos > neg with overflow
                        compareUnit.alufn = b100001; 
                        adderUnit.alufn = b100001;  
                        adderUnit.x = 16h7FFF;
                        adderUnit.y = 16hFFFF;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                     b001011: 
                        // CMPEQ: neg > neg without overflow
                        compareUnit.alufn = b100001;  
                        adderUnit.alufn = b100001; 
                        adderUnit.x = 16hFFFE;
                        adderUnit.y = 16hFFFD;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 


                    b001100: 
                        // CMPLT: 0 == 0
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011; 
                        adderUnit.x = 16b0;
                        adderUnit.y = 16b0;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 
                    

                    b001101: 
                        // CMPLT: pos == pos
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;  
                        adderUnit.x = 16h0010;
                        adderUnit.y = 16h0010;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 
                    

                    b001110: 
                        // CMPLT: neg == neg
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;   
                        adderUnit.x = 16hE000;
                        adderUnit.y = 16hE000;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 
                    

                    b001111: 
                        // CMPLT: pos < pos without overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;   
                        adderUnit.x = 16h0060;
                        adderUnit.y = 16h0100;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;}  
                    

                    b010000: 
                        // CMPLT: neg < pos without overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011; 
                        adderUnit.x = 16hFFF9;
                        adderUnit.y = 16h0001;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;}
                    

                    b010001: 
                        // CMPLT: neg < pos with overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;   
                        adderUnit.x = 16hF000;
                        adderUnit.y = 16h7FFF;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b010010: 
                        // CMPLT: neg < neg without overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011; 
                        adderUnit.x = 16hFFED;
                        adderUnit.y = 16hFFEE;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;}
                    

                    b010011: 
                        // CMPLT: pos > pos without overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;   
                        adderUnit.x = 16h0110;
                        adderUnit.y = 16h0100;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b010100: 
                        // CMPLT: pos > neg without overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011; 
                        adderUnit.x = 16h0020;
                        adderUnit.y = 16hFFFF;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b010101: 
                        // CMPLT: pos > neg with overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;  
                        adderUnit.x = 16h7FFF;
                        adderUnit.y = 16hFFFF;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b010110: 
                        // CMPLT: neg > neg without overflow
                        compareUnit.alufn = b100011;  
                        adderUnit.alufn = b100011;  
                        adderUnit.x = 16hFEEE;
                        adderUnit.y = 16hF111;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 
                    


                    b010111: 
                        // CMPLE: 0 == 0
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101; 
                        adderUnit.x = 16b0;
                        adderUnit.y = 16b0;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b011000: 
                        // CMPLE: pos == pos
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;   
                        adderUnit.x = 16h0989;
                        adderUnit.y = 16h0989;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b011001: 
                        // CMPLE: neg == neg
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;   
                        adderUnit.x = 16hF110;
                        adderUnit.y = 16hF110;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b011010: 
                        // CMPLE: pos < pos without overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;  
                        adderUnit.x = 16h0180;
                        adderUnit.y = 16h0120;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;}  
                    

                    b011011: 
                        // CMPLE: neg < pos without overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;   
                        adderUnit.x = 16hFFF9;
                        adderUnit.y = 16h0010;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;}
                    

                    b011100: 
                        // CMPLE: neg < pos with overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;  
                        adderUnit.x = 16hF000;
                        adderUnit.y = 16h8FFF;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;} 
                    

                    b011101: 
                        // CMPLE: neg < neg without overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101; 
                        adderUnit.x = 16hF001;
                        adderUnit.y = 16hFEEE;
                        if (compareUnit.out[0] != 1) {state.d = state.FAIL;}
                    

                    b011110: 
                        // CMPLE: pos > pos without overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;   
                        adderUnit.x = 16h0888;
                        adderUnit.y = 16h0666;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b011111: 
                        // CMPLT: pos > neg without overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;   
                        adderUnit.x = 16h0011;
                        adderUnit.y = 16hFFFF;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}
                    

                    b100000: 
                        // CMPLT: pos > neg with overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;   
                        adderUnit.x = 16h7FFF;
                        adderUnit.y = 16hFF99;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;}


                    b100001: 
                        // CMPLT: neg > neg without overflow
                        compareUnit.alufn = b100101;  
                        adderUnit.alufn = b100101;  
                        adderUnit.x = 16hFBBB;
                        adderUnit.y = 16hFCCC;
                        if (compareUnit.out[0] != 0) {state.d = state.FAIL;} 


                    b100010: 
                        state.d = state.PASS;

                }

            state.PASS:
                indicator = b11;

            state.FAIL:
                indicator = b01;
        }
        if(state.q == state.TEST) {
          counter.d = counter.q + 1;
        }
        counter_indicator = counter.q;
        case (state.q) {
          state.SLEEP: state_indicator=b0001;
          state.TEST:  state_indicator=b0010;
          state.PASS:  state_indicator=b0100;
          state.FAIL:  state_indicator=b1000;
          default: state_indicator=b1111;
        }
	}
}