module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  const DIV = 16;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_cond[5];
    edge_detector buttondetector[5](#RISE(1), #FALL(0));
    .rst(rst) {
      manual_test manual_t;
      multi_seven_segment multiSeg;
      // booleanTester boolean_tester;
      #DIV(DIV) {
        // multi_seven_seg seg_display;
      }
    }
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // 7-segment
    // seg_display.values = $build(16b0, 4);
    // io_seg = seg_display.seg;
    // io_sel = seg_display.sel;
    
    // io_button
    button_cond.in = io_button;
    buttondetector.in = button_cond.out;
    manual_t.proceed = buttondetector.out[0];
    manual_t.data[7:0] = io_dip[0];
    manual_t.data[15:8] = io_dip[1];
    
    io_led[1] = manual_t.out[15:8];
    io_led[0] = manual_t.out[7:0];
    
    multiSeg.values = $build(manual_t.out, 4);
    io_seg = ~multiSeg.seg;
    io_sel = ~multiSeg.sel;
  }
}