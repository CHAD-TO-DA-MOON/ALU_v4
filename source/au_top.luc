module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner button_cond[5];
    edge_detector buttondetector[5](#RISE(1), #FALL(0));
    .rst(rst) {
      
      multiSevenSegment multiSeg;
      
      manualTester manual_t;
      autoTester auto_t;
      
      
    }
  }
  
  fsm tester(.clk(clk), .rst(rst)) = {AUTO, MANUAL};
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    button_cond.in = io_button;
    buttondetector.in = button_cond.out;
    
    // connect manual input
    manual_t.proceed = buttondetector.out[0]; // button to go to the next mode
    manual_t.data[7:0] = io_dip[0];
    manual_t.data[15:8] = io_dip[1];
    
    
    // connect auto input
    auto_t.io_button = buttondetector.out[2];
    
    
    
    // io_button
    button_cond.in = io_button;
    buttondetector.in = button_cond.out;
    manual_t.proceed = buttondetector.out[0];
    manual_t.data[7:0] = io_dip[0];
    manual_t.data[15:8] = io_dip[1];
    
    // 7segment
    multiSeg.values = $build(manual_t.out, 4);
    
    
    
    case (tester.q){
      
      tester.AUTO:
        io_led = auto_t.io_led;
        io_seg = auto_t.io_seg;
        io_sel = auto_t.io_sel;
        if (buttondetector.out[0]) {  // press middle to toggle tester
          tester.d = tester.MANUAL;
        }
      
      tester.MANUAL:
        
        // LED
        io_led[2][2:0] = manual_t.zvn;
        io_led[1] = manual_t.ledout[15:8];
        io_led[0] = manual_t.ledout[7:0];
        io_seg = ~multiSeg.seg;
        io_sel = ~multiSeg.sel;
        
        if (buttondetector.out[0]) {  // press middle to toggle tester
          tester.d = tester.AUTO;
        }
      
      
    }
  }
}